# =================================================================================
# Android CI/CD 工作流
# ---------------------------------------------------------------------------------
# 当代码被推送到 master 分支时，此工作流将自动触发。
# 它会执行以下操作：
# 1. 设置 Java 和 Gradle 环境。
# 2. 使用 Gradle 构建并签名 Release 版本的 APK。
# 3. 计算构建产物的 SHA256 哈希值并生成构建摘要。
# 4. 将所有 APK 和元数据文件作为构建产物上传。
# 5. 发送构建结果和 APK 文件到指定的 Telegram 频道。
# =================================================================================

name: Android CI

# 定义工作流的触发条件
on:
  push:
    branches: [ "master" ]
    # 当推送仅涉及以下文件类型时，不触发工作流，以节省资源。
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
      - '.github/*'
      - '.idea/**'
      - '!.github/workflows/**' # 例外规则：确保对工作流本身的修改能触发 CI

# 为工作流中的所有作业设置默认权限。
permissions:
  contents: write # 允许写入内容，例如创建 GitHub Release。
  actions: write  # 允许操作 Actions，例如取消工作流。
  packages: write # 允许写入 GitHub Packages。

# 定义工作流中的作业
jobs:
  build-and-release: # 作业的唯一ID

    runs-on: ubuntu-latest # 指定作业运行在最新版的 Ubuntu 虚拟环境中。

    steps:
      # 第 1 步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史提交记录，以便 `git rev-list` 可以正确计算版本号。

      # 第 2 步：设置 JDK 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'        # 指定 Java 版本为 21。
          distribution: 'temurin'   # 使用 Eclipse Temurin 发行版。
          cache: gradle             # 启用 Gradle 依赖项的缓存，以加快后续构建速度。

      # 第 3 步：设置签名密钥库
      - name: Setup Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks

      # 第 4 步：构建并签名应用
      - name: Build with Gradle
        run: |
          chmod +x gradlew # 授予 gradlew 脚本执行权限。
          ./gradlew assembleRelease
        env:
          KEYSTORE_PATH: "../keystore.jks"
          KEYSTORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # 第 5 步：准备构建产物信息
      - name: Prepare Artifacts, Extract Version String, and Generate Summary
        id: artifacts
        run: |
            apk_dir="app/build/outputs/apk/release"
            apk_file_all=$(find "$apk_dir" -name 'OShin_all_v*.apk')
            if [ -z "$apk_file_all" ]; then
              echo "::error::Universal APK not found!"
              exit 1
            fi
            echo "APK_FILE_ALL=$apk_file_all" >> $GITHUB_ENV
          
            # 提取完整文件名
            apk_filename=$(basename "$apk_file_all")
            echo "Extracted filename: $apk_filename"
          
            # 移除前缀 "OShin_all_"
            version_with_suffix="${apk_filename#OShin_all_}"
            echo "Version with suffix: $version_with_suffix"
          
            # 移除后缀 ".apk" 得到最终的版本字符串
            version_string="${version_with_suffix%.apk}"
            echo "Extracted version string: $version_string"
          
            # 设置 tag_name 输出为提取的版本字符串
            echo "tag_name=$version_string" >> $GITHUB_OUTPUT
          
            # 设置 name 输出也为提取的版本字符串
            echo "release_name=$version_string" >> $GITHUB_OUTPUT
          
            # 计算 SHA
            sha_all=$(sha256sum "$apk_file_all" | awk '{print $1}')
            echo "sha_all=$sha_all" >> $GITHUB_OUTPUT
          
            # 生成摘要
            {
              echo "### OShin Build Success :rocket:"
              echo ""
              echo "| Architecture | SHA256 Hash |"
              echo "|:---|:---|"
              echo "| all | \`$sha_all\` |"
            } >> $GITHUB_STEP_SUMMARY

      # 第 6 步：上传构建产物
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OShin-Build-${{ github.sha }} # 为产物包指定一个包含提交ID的唯一名称。
          path: app/build/outputs/apk/release/ # 上传 release 目录下的所有文件。

      - name: Create Release and Upload Asset to OShin-Builds
        uses: softprops/action-gh-release@v1
        with:
          repository: suqi8/OShin-Builds
          token: ${{ secrets.PUSH_TOKEN }}
          # 使用提取的版本字符串作为 tag_name
          tag_name: ${{ steps.artifacts.outputs.tag_name }}
          # 使用提取的版本字符串作为 Release 的 Name
          name: ${{ steps.artifacts.outputs.release_name }}
          body: |
            Automatic CI build based on commit: ${{ github.sha }}
            Commit message: ${{ github.event.head_commit.message }}
          prerelease: true
          files: ${{ env.APK_FILE_ALL }}

      # 第 7 步：预处理提交信息，清除 Markdown 危险字符并保留换行
      - name: Sanitize multiline commit message for Telegram
        run: |
          echo "处理提交信息，清理特殊字符..."
          echo "COMMIT_MSG<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.head_commit.message }}" \
            | sed 's/[\\`*_()\[\]]/ /g' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 第 8 步：发送 Telegram 通知
      - name: Send Notification to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }} # Telegram 接收者的 Chat ID
          token: ${{ secrets.TELEGRAM_TOKEN }} # Telegram Bot 的 Token
          document: ${{ env.APK_FILE_ARMALL }} # 包含所有架构的 APK 文件
          message: |
            🚀 **OShin New CI Build！**

            ${{ env.COMMIT_MSG }}
            🔗 [查看本次提交](${{ github.event.head_commit.url }})

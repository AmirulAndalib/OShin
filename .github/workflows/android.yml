# =================================================================================
# Android CI/CD 工作流
# ---------------------------------------------------------------------------------
# 当代码被推送到 master 分支时，此工作流将自动触发。
# 它会执行以下操作：
# 1. 设置 Java 和 Gradle 环境。
# 2. 使用 Gradle 构建并签名 Release 版本的 APK。
# 3. 计算构建产物的 SHA256 哈希值并生成构建摘要。
# 4. 将所有 APK 和元数据文件作为构建产物上传。
# 5. 发送构建结果和 APK 文件到指定的 Telegram 频道。
# =================================================================================

name: Android CI

# 定义工作流的触发条件
on:
  push:
    branches: [ "master" ]
    # 当推送仅涉及以下文件类型时，不触发工作流，以节省资源。
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
      - '.github/*'
      - '.idea/**'
      - '!.github/workflows/**' # 例外规则：确保对工作流本身的修改能触发 CI

# 为工作流中的所有作业设置默认权限。
permissions:
  contents: write # 允许写入内容，例如创建 GitHub Release。
  actions: write  # 允许操作 Actions，例如取消工作流。
  packages: write # 允许写入 GitHub Packages。

# 定义工作流中的作业
jobs:
  build-and-release: # 作业的唯一ID

    runs-on: ubuntu-latest # 指定作业运行在最新版的 Ubuntu 虚拟环境中。

    steps:
      # 第 1 步：检出代码
      # `actions/checkout` 用于从仓库中拉取代码。
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史提交记录，以便 `git rev-list` 可以正确计算版本号。

      # 第 2 步：设置 JDK 环境
      # `actions/setup-java` 用于安装指定版本的 Java。
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'        # 指定 Java 版本为 21。
          distribution: 'temurin'   # 使用 Eclipse Temurin 发行版。
          cache: gradle             # 启用 Gradle 依赖项的缓存，以加快后续构建速度。

      # 第 3 步：设置签名密钥库
      # 从 GitHub Secrets 中解码 Base64 编码的密钥库文件。
      - name: Setup Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks

      # 第 4 步：构建并签名应用
      # 执行 Gradle 构建任务来生成已签名的 Release APK。
      - name: Build with Gradle
        run: |
          chmod +x gradlew # 授予 gradlew 脚本执行权限。
          ./gradlew assembleRelease
        env:
          # 将签名所需的信息作为环境变量传递给 Gradle。
          # 这些信息应在 GitHub 仓库的 Settings > Secrets and variables > Actions 中配置。
          KEYSTORE_PATH: "../keystore.jks"
          KEYSTORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # 第 5 步：准备构建产物信息
      # 查找构建生成的 APK 和元数据文件，计算其 SHA256 哈希值，并生成一个格式化的构建摘要。
      - name: Prepare Artifacts and Generate Summary
        id: artifacts # 为此步骤设置一个 ID，以便后续步骤可以引用其输出。
        run: |
          # 查找文件并将其路径导出到 GITHUB_ENV，供后续步骤使用。
          apk_dir="app/build/outputs/apk/release"
          echo "APK_FILE_ARMEABI=$(find $apk_dir -name 'OShin_armeabi-v7a_v*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_ARM64=$(find $apk_dir -name 'OShin_arm64-v8a_v*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_ARMALL=$(find $apk_dir -name 'OShin_all_v*.apk')" >> $GITHUB_ENV
          
          # 计算 SHA256 哈希值
          sha_armeabi=$(sha256sum $APK_FILE_ARMEABI | awk '{print $1}')
          sha_arm64=$(sha256sum $APK_FILE_ARM64 | awk '{print $1}')
          sha_armall=$(sha256sum $APK_FILE_ARMALL | awk '{print $1}')
          
          # 将哈希值设置为此步骤的输出，以便在其他步骤中引用。
          echo "sha_armeabi=$sha_armeabi" >> $GITHUB_OUTPUT
          echo "sha_arm64=$sha_arm64" >> $GITHUB_OUTPUT
          echo "sha_armall=$sha_armall" >> $GITHUB_OUTPUT
          
          # 使用 Markdown 格式化构建摘要，并写入 GITHUB_STEP_SUMMARY。
          # 此摘要将显示在 GitHub Actions 的作业摘要页面。
          {
            echo "### OShin 构建成功 :rocket:"
            echo ""
            echo "| 架构 | SHA256 哈希 |"
            echo "|:---|:---|"
            echo "| armeabi-v7a | \`$sha_armeabi\` |"
            echo "| arm64-v8a | \`$sha_arm64\` |"
            echo "| all | \`$sha_armall\` |"
          } >> $GITHUB_STEP_SUMMARY

      # 第 6 步：上传构建产物
      # 将所有生成的 APK 和元数据文件打包上传，以便在工作流结束后可以下载。
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OShin-Build-${{ github.sha }} # 为产物包指定一个包含提交ID的唯一名称。
          path: app/build/outputs/apk/release/ # 上传 release 目录下的所有文件。

      # 第 7 步：发送通知到 Telegram
      - name: Send Notification to Telegram
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_TO }} # Telegram 接收者的 Chat ID，建议配置为 Secret。
          token: ${{ secrets.TELEGRAM_TOKEN }} # Telegram Bot 的 Token，必须配置为 Secret。
          document: ${{ env.APK_FILE_ARMALL }} # 将包含所有架构的 APK 作为文件发送。
          # 格式化的消息内容，支持 Markdown。
          message: |
            🚀 **OShin 新版本构建完成！**
            
            **提交信息:**
            \`\`\`
            ${{ github.event.head_commit.message }}
            \`\`\`
            
            **构建详情:**
            - **armeabi-v7a:** `${{ steps.artifacts.outputs.sha_armeabi }}`
            - **arm64-v8a:** `${{ steps.artifacts.outputs.sha_arm64 }}`
            - **all:** `${{ steps.artifacts.outputs.sha_armall }}`
            
            🔗 **查看本次提交:** [${{ github.sha }}](${{ github.event.head_commit.url }})

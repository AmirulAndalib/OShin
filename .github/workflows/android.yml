# =================================================================================
# Android CI/CD 工作流
# ---------------------------------------------------------------------------------
# 当代码被推送到 master 分支时，此工作流将自动触发。
# 它会执行以下操作：
# 1. 设置 Java 和 Gradle 环境。
# 2. 使用 Gradle 构建并签名 Release 版本的 APK。
# 3. 计算构建产物的 SHA256 哈希值并生成构建摘要。
# 4. 将所有 APK 和元数据文件作为构建产物上传。
# 5. 发送构建结果和 APK 文件到指定的 Telegram 频道。
# =================================================================================

name: Android CI

# 定义工作流的触发条件
on:
  push:
    branches: [ "master" ]
    # 当推送仅涉及以下文件类型时，不触发工作流，以节省资源。
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
      - '.github/*'
      - '.idea/**'
      - '!.github/workflows/**' # 例外规则：确保对工作流本身的修改能触发 CI

# 为工作流中的所有作业设置默认权限。
permissions:
  contents: write # 允许写入内容，例如创建 GitHub Release。
  actions: write  # 允许操作 Actions，例如取消工作流。
  packages: write # 允许写入 GitHub Packages。

# 定义工作流中的作业
jobs:
  build-and-release: # 作业的唯一ID

    runs-on: ubuntu-latest # 指定作业运行在最新版的 Ubuntu 虚拟环境中。

    steps:
      # 第 1 步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史提交记录，以便 `git rev-list` 可以正确计算版本号。

      # 第 2 步：设置 JDK 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'        # 指定 Java 版本为 21。
          distribution: 'temurin'   # 使用 Eclipse Temurin 发行版。
          cache: gradle             # 启用 Gradle 依赖项的缓存，以加快后续构建速度。

      # 第 3 步：设置签名密钥库
      - name: Setup Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks

      # 第 4 步：构建并签名应用
      - name: Build with Gradle
        run: |
          chmod +x gradlew # 授予 gradlew 脚本执行权限。
          ./gradlew assembleRelease
        env:
          KEYSTORE_PATH: "../keystore.jks"
          KEYSTORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # 第 5 步：准备构建产物信息
      - name: Prepare Artifacts and Generate Summary
        id: artifacts
        run: |
          apk_dir="app/build/outputs/apk/release"
          apk_file_armeabi=$(find "$apk_dir" -name 'OShin_armeabi-v7a_v*.apk')
          apk_file_arm64=$(find "$apk_dir" -name 'OShin_arm64-v8a_v*.apk')
          apk_file_armall=$(find "$apk_dir" -name 'OShin_all_v*.apk')
          
          # 添加一个检查，如果找不到文件就让工作流失败，而不是静默地继续。
          if [ -z "$apk_file_armall" ]; then
            echo "::error::Universal APK not found! Build may have failed to produce artifacts."
            exit 1
          fi
          
          # 将文件路径导出到 GITHUB_ENV，供后续步骤（如 Telegram 通知）使用。
          echo "APK_FILE_ARMEABI=$apk_file_armeabi" >> $GITHUB_ENV
          echo "APK_FILE_ARM64=$apk_file_arm64" >> $GITHUB_ENV
          echo "APK_FILE_ARMALL=$apk_file_armall" >> $GITHUB_ENV
          
          # 使用可靠的本地变量计算 SHA256 哈希值。
          sha_armeabi=$(sha256sum "$apk_file_armeabi" | awk '{print $1}')
          sha_arm64=$(sha256sum "$apk_file_arm64" | awk '{print $1}')
          sha_armall=$(sha256sum "$apk_file_armall" | awk '{print $1}')
          
          # 将哈希值设置为此步骤的输出（GITHUB_OUTPUT），以便在其他步骤中通过 steps.artifacts.outputs.sha_... 引用。
          echo "sha_armeabi=$sha_armeabi" >> $GITHUB_OUTPUT
          echo "sha_arm64=$sha_arm64" >> $GITHUB_OUTPUT
          echo "sha_armall=$sha_armall" >> $GITHUB_OUTPUT
          
          # 生成将在 GitHub Actions 摘要页面显示的 Markdown 表格。
          {
            echo "### OShin 构建成功 :rocket:"
            echo ""
            echo "| 架构 | SHA256 哈希 |"
            echo "|:---|:---|"
            echo "| armeabi-v7a | \`$sha_armeabi\` |"
            echo "| arm64-v8a | \`$sha_arm64\` |"
            echo "| all | \`$sha_armall\` |"
          } >> $GITHUB_STEP_SUMMARY

      # 第 6 步：上传构建产物
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OShin-Build-${{ github.sha }} # 为产物包指定一个包含提交ID的唯一名称。
          path: app/build/outputs/apk/release/ # 上传 release 目录下的所有文件。

      - name: Get and escape submission information
        id: prepare_message
        run: |
          commit_msg="$(git log -1 --pretty=format:%B)"

          escaped_msg=$(echo "$commit_msg" | sed -e 's/[]\[_*()~`>#+=|{}.!-]/\\&/g')

          echo "escaped_commit_msg<<EOF" >> $GITHUB_OUTPUT
          echo "$escaped_msg" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Notification to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          document: ${{ env.APK_FILE_ARMALL }}
          debug: true
          format: markdown
          message: |
            🚀 **OShin New CI Build！**

            ${{ steps.prepare_message.outputs.escaped_commit_msg }}

            🔗 [查看本次提交](${{ github.event.head_commit.url }})

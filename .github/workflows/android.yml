name: Android CI

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
      - '.github/**'
      - '.idea/**'
      - '!.github/workflows/**'
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
      - '.github/**'
      - '.idea/**'
      - '!.github/workflows/**'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: | 
        ./gradlew assembleDebug
        echo "APK_FILE_ARMEABI=$(find app/build/outputs/apk/debug -name 'OPatch_armeabi-v7a_v*.apk')" >> $GITHUB_ENV
        echo "APK_FILE_ARM64=$(find app/build/outputs/apk/debug -name 'OPatch_arm64-v8a_v*.apk')" >> $GITHUB_ENV
        echo "APK_FILE_ARMALL=$(find app/build/outputs/apk/debug -name 'OPatch_all_v*.apk')" >> $GITHUB_ENV
        echo "APK_FILE_METADATA=$(find app/build/outputs/apk/debug -name 'output-metadata.json')" >> $GITHUB_ENV

    - name: Show Artifacts SHA256
      run: |
        echo "### Build Success :rocket:" >> $GITHUB_STEP_SUMMARY
        echo "|ABI|SHA256|" >> $GITHUB_STEP_SUMMARY
        echo "|:--------:|:----------|" >> $GITHUB_STEP_SUMMARY
        armeabi=($(sha256sum "${{ env.APK_FILE_ARMEABI }}"))
        echo "|armeabi|${armeabi[0]}|" >> $GITHUB_STEP_SUMMARY
        arm64=($(sha256sum "${{ env.APK_FILE_ARM64 }}"))
        echo "|arm64|${arm64[0]}|" >> $GITHUB_STEP_SUMMARY
        armAll=($(sha256sum "${{ env.APK_FILE_ARMALL }}"))
        echo "|armAll|${armAll[0]}|" >> $GITHUB_STEP_SUMMARY
        metadata=($(sha256sum "${{ env.APK_FILE_METADATA }}"))
        echo "|metadata|${metadata[0]}|" >> $GITHUB_STEP_SUMMARY

    - name: Upload All APK
      uses: actions/upload-artifact@v4
      with:
        name: OPatch_all_${{ github.event.head_commit.id }}
        path: ${{ env.APK_FILE_ARMALL }}

    - name: Upload Arm64 APK
      uses: actions/upload-artifact@v4
      with:
        name: OPatch_arm64_${{ github.event.head_commit.id }}
        path: ${{ env.APK_FILE_ARM64 }}

    - name: Upload Armeabi APK
      uses: actions/upload-artifact@v4
      with:
        name: OPatch_armeabi_${{ github.event.head_commit.id }}
        path: ${{ env.APK_FILE_ARMEABI }}

    - name: Upload Metadata
      uses: actions/upload-artifact@v4
      with:
        name: output-metadata
        path: ${{ env.APK_FILE_METADATA }}

  upload-telegram:
    name: Upload Release
    if: ${{ success() && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs:
      - build
      - telegram-bot-api
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@v4
        with:
          name: telegram-bot-api-binary
          path: .
      - name: Release
        env:
          COMMIT_MESSAGE: |+
            New push to GitHub\!
            ```
            ${{ github.event.head_commit.message }}
            ```by `${{ github.event.head_commit.author.name }}`
            See commit detail [here](${{ github.event.head_commit.url }})
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ["COMMIT_MESSAGE"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ["COMMIT_URL"])))'`
          export armeabi=$(find artifacts -name "OPatch_armeabi-v7a_v*.apk")
          export arm64=$(find artifacts -name "OPatch_arm64-v8a_v*.apk")
          export armAll=$(find artifacts -name "OPatch_all_v*.apk")
          export metadata=$(find artifacts -name "output-metadata.json")
          ls artifacts
          chmod +x telegram-bot-api-binary
          ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 --local 2>&1 > /dev/null &
          curl -v "http://127.0.0.1:8081/bot${{ secrets.TELEGRAM_TOKEN  }}/sendMediaGroup?chat_id=-1002477655219&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Farm64%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Farm32%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FarmAll%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Funiversal%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Fsymbol%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22:${ESCAPED}%7D%5D" \
           -F arm32="@$arm32" \
           -F arm64="@$arm64" \
           -F armAll="@$armAll" \
           -F metadata="@metadata" \
          pkill telegram-bot

  telegram-bot-api:
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Clone Telegram Bot API
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v4.0.2
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
      - name: Compile Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary
      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary
